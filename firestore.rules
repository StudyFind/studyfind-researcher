rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	match /researchers/{researcherID} {
    	allow read, write: if researcherID == request.auth.uid

      match /notifications/{notificationID} {
      	allow read: if researcherID == request.auth.uid
        allow update: if researcherID == request.auth.uid
        	&& resource.data.title == request.resource.data.title
          && resource.data.description == request.resource.data.description
          && resource.data.time == request.resource.data.time
          && resource.data.type == request.resource.data.type
          && resource.data.read == false && request.resource.data.read == true
      }
    }

    match /participants/{participantID} {
    	allow read, write: if participantID == request.auth.uid

      match /notifications/{notificationID} {
      	allow read: if participantID == request.auth.uid
        allow update: if participantID == request.auth.uid
        	&& resource.data.title == request.resource.data.title
          && resource.data.description == request.resource.data.description
          && resource.data.time == request.resource.data.time
          && resource.data.type == request.resource.data.type
          && resource.data.read == false && request.resource.data.read == true
      }
    }

    match /studies/{studyID} {
      allow read, update, delete: if resource.data.researcher.id == request.auth.uid
      allow read: if request.auth != null
      // allow read if custom claim is participant

      match /participants/{participantID} {
        allow create, read: if participantID == request.auth.uid
        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid
        // allow create by participant

        match /notes/{noteID} {
          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid
        }
    	}
    }

    // match reminders
    match /reminders/{reminderID} {
    	allow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id
      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id
      allow update, delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id
    }

    match /meetings/{meetingID} {
    	allow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID
      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id
      allow update, delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id
    }

    match /feedback/{feedbackID} {
    	allow write: if request.auth != null
    }

    // fetch a study from firestore
    function getStudyData(studyID) {
    	return get(/databases/$(database)/documents/studies/$(studyID)).data
    }
  }
}
